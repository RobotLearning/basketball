/*****************************************************************************
 This is an Imakefile for GNU make, relying on special imake rules in
 ~sschaal/prog/imake. In order to use imake and make correctly, look
 into the README file in ~sschaal/prog/imake.

 Definition of variables:

 SOURCES  : All source files which are used in this Imakefile. Imake
            will automatically generate dependencies to keep these
            source files up-to-date with repect to included header files.

 HEADERS  : All header to be kept up to data
 OBJECTS  : All object files to be used in certain rules. See SS_Imake.rules
 SRCDIR   : Directory where source files come from (global variable)
 LIBDIR   : Where to install a lib
 HEADERDIR: Where to install header files
 BINDIR   : Where to install executables
 INCLUDES : All include directories

 Stefan Schaal, September 1996

****************************************************************************/
/*
USE_DEBUG = TRUE
*/

#include "../makefiles/ImakeCPPrules.tmpl"

INCLUDE_SUBDIRS = $(shell find $(SRCDIR) -type d | grep -v svn | sed 's/\(.*\)/-I\1/' | tr "\n" " ")

INCLUDES               = -I../src \
                         -I../include \
                         $(INCLUDE_SUBDIRS) \
                         -I$(MY_INCLUDES) \
                         -I$(LAB_INCLUDES) \
                         -I$(LAB_ROOT)/cb/include \
                         -I$(LAB_ROOT)/cb/math \
                         -I$(SARCOSDTSHOME)/include \
                         -I/sw/include \
                         -I/usr/X11/include \
                         -I/usr/local/glut/include \
                         -I/usr/include/flycapture \
                         -I$(HOME)/basketball/include
ifeq ($(USE_DEBUG),TRUE)
CFLAGS                 = $(DEBUG_CC_FLAGS) $(INCLUDES) -D$(MACHTYPE)
else
CFLAGS                 = $(OPTIMIZE_CC_FLAGS) $(INCLUDES) -D$(MACHTYPE)
endif
SRCDIR                 = ../src
LIBDIR                 = $(MY_LIBDIR)/$(MACHTYPE) \
                         -lflycapture${D}
HEADERDIR              = $(MY_INCLUDES)
LDFLAGS                = -L$(MY_LIBDIR)/$(MACHTYPE) $(LAB_LIBDIR) -L$(HOME)/basketball/lib
LIBRARIES              = 
BINDIR                 = .

/*
LIB_TASK      = -lcb_task -lcb -lSLtask -lSLcommon -lutility $(COMM_LIBRARIES) -lm -lflycapture -ljsw -Wl,--wrap=memcpy
*/
LIB_TASK      = -lcb_task -lcb -lSLtask -lSLcommon -lutility $(COMM_LIBRARIES) -lm -lbasket -lnlopt -lpthread
LIB_OPENGL    = -lcb_openGL -lcb -lSLopenGL -lSLcommon -lutility $(COMM_LIBRARIES) -lm  $(OPENGL_LIBRARIES)

SRCS_XCB = initUserTasks.c \
	sample_task.c \
	ball_following_task.c \
	basketball_task.c 
/*
           euler_angles.c \
           cogJacobian.c \
           sample_task.c
*/

OBJS_XCB = initUserTasks.o \
	sample_task.o \
	ball_following_task.o \
	basketball_task.o
/*
           euler_angles.o \
           cogJacobian.o \
	   sample_task.o
*/

SRCS_XOPENGL  = initUserGraphics.c
OBJS_XOPENGL  = initUserGraphics.o
	
CPP_SRCS_XCB = $(shell find $(SRCDIR) -regex "[^\#]*\.cpp" -printf "%P ")
CPP_OBJS_XCB = $(patsubst %.cpp,%.o,$(CPP_SRCS_XCB))

SRCS_VISION_COM = kinect_servo.c \
                  kbhit.c
OBJS_VISION_COM = kinect_servo.o \
                  kbhit.o
LIBS_VISION_COM = -lpthread

SOURCES = $(SRCS_XCB) $(SRCS_XOPENGL) 

OBJECTS = $(OBJS_XCB) $(OBJS_XOPENGL) 

CPPOBJECTS = $(CPP_OBJS_XCB)

HEADERS = 

InstallProgram($(LAB_ROOT)/cb/$(MACHTYPE)/xcb,$(BINDIR))
InstallProgram($(LAB_ROOT)/cb/$(MACHTYPE)/xsimulation,$(BINDIR))
InstallProgram($(LAB_ROOT)/cb/$(MACHTYPE)/xmotor,$(BINDIR))
InstallProgram($(LAB_ROOT)/cb/$(MACHTYPE)/xvision,$(BINDIR))
ifeq ($(HOST),$(XRCB_HOST))
InstallProgram($(LAB_ROOT)/cb/$(MACHTYPE)/xrcb,$(BINDIR))
InstallProgram($(LAB_ROOT)/cb/$(MACHTYPE)/xrmotor,$(BINDIR))
endif

CPPProgramListTarget( xtask, $(OBJS_XCB) $(CPPOBJECTS) ,$(LIB_TASK) )
ProgramListTarget( xopengl, $(OBJS_XOPENGL), $(LIB_OPENGL) )
/*
ComProgramListTarget( xcom, $(OBJS_VISION_COM), $(LIBS_VISION_COM) )
*/

NormalObjRule( $(OBJECTS) )
NormalCPPObjRule( $(CPPOBJECTS) )
